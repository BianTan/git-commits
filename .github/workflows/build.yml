name: GitCommits Builder

on:
  push:
    branches:
      - main
    paths:
      - version.py

jobs:
  Windows-build:
    runs-on: windows-latest
    name: Build Windows Binary

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Init Python 3.11.4
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.4'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt
        shell: pwsh

      - name: Pyinstaller
        run: |
          pyinstaller GitCommits.spec
        shell: pwsh
        
      - name: Upload Windows File
        uses: actions/upload-artifact@v3
        with:
          name: windows
          path: dist/GitCommits.exe

  Linux-build-amd64:
    runs-on: ubuntu-latest
    name: Build Linux Amd64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Init Python 3.11.4
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.4'
          cache: 'pip'
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Pyinstaller
        run: |
          pyinstaller GitCommits.spec
          mv dist/GitCommits dist/GitCommits_Amd64

      - name: Upload Linux File
        uses: actions/upload-artifact@v3
        with:
          name: linux-amd64
          path: dist/GitCommits_Amd64
          
  Create-release:
    permissions: write-all
    runs-on: ubuntu-latest
    needs: [Windows-build, Linux-build-amd64]
    steps:
      - uses: actions/checkout@v2

      - name: Release Version
        id: release_version
        run: |
          app_version=$(cat version.py |sed -ne "s/APP_VERSION\s=\s'v\(.*\)'/\1/gp")
          echo "app_version=$app_version" >> $GITHUB_ENV

      - name: Download Artifact
        uses: actions/download-artifact@v3

      - name: get release_informations
        shell: bash
        run: |
          mkdir releases
          mv ./windows/GitCommits.exe ./releases/GitCommits_Win_v${{ env.app_version }}.exe
          mv ./linux-amd64/GitCommits_Amd64 ./releases/GitCommits_Amd64_v${{ env.app_version }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.app_version }}
          release_name: v${{ env.app_version }}
          body: ${{ github.event.commits[0].message }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: dwenegar/upload-release-assets@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create_release.outputs.id }}
          assets_path: |
            ./releases/
